/*----- PROTECTED REGION ID(TPM101.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        TPM101.cpp
//
// description : C++ source for the TPM101 class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TPM101 are implemented in this file.
//
// project :     TPM101
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TPM101.h>
#include <TPM101Class.h>

/*----- PROTECTED REGION END -----*/	//	TPM101.cpp

/**
 *  TPM101 class description:
 *    PID
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  PidOn         |  pid_on
//  PidOff        |  pid_off
//  InitCOM       |  init_com
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Temperature  |  Tango::DevFloat	Scalar
//  PidStatus    |  Tango::DevEnum	Scalar
//================================================================

namespace TPM101_ns
{
/*----- PROTECTED REGION ID(TPM101::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	TPM101::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TPM101::TPM101()
 *	Description : Constructors for a Tango device
 *                implementing the classTPM101
 */
//--------------------------------------------------------
TPM101::TPM101(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TPM101::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::constructor_1
}
//--------------------------------------------------------
TPM101::TPM101(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(TPM101::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::constructor_2
}
//--------------------------------------------------------
TPM101::TPM101(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(TPM101::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : TPM101::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TPM101::delete_device()
{
	DEBUG_STREAM << "TPM101::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(TPM101::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::delete_device
	delete[] attr_Temperature_read;
	delete[] attr_PidStatus_read;
}

//--------------------------------------------------------
/**
 *	Method      : TPM101::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void TPM101::init_device()
{
	DEBUG_STREAM << "TPM101::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(TPM101::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Temperature_read = new Tango::DevFloat[1];
	attr_PidStatus_read = new PidStatusEnum[1];
	/*----- PROTECTED REGION ID(TPM101::init_device) ENABLED START -----*/
	
	//	Initialize device
	FlagDebugIO = 0;
	if(!simulationMode)
    {
      init_com(); 
    }
	/*----- PROTECTED REGION END -----*/	//	TPM101::init_device
}

//--------------------------------------------------------
/**
 *	Method      : TPM101::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void TPM101::get_device_property()
{
	/*----- PROTECTED REGION ID(TPM101::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("RS485_addr"));
	dev_prop.push_back(Tango::DbDatum("SimulationMode"));
	dev_prop.push_back(Tango::DbDatum("COMPortNb"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on TPM101Class to get class property
		Tango::DbDatum	def_prop, cl_prop;
		TPM101Class	*ds_class =
			(static_cast<TPM101Class *>(get_device_class()));
		int	i = -1;

		//	Try to initialize RS485_addr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  rS485_addr;
		else {
			//	Try to initialize RS485_addr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  rS485_addr;
		}
		//	And try to extract RS485_addr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  rS485_addr;

		//	Try to initialize SimulationMode from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  simulationMode;
		else {
			//	Try to initialize SimulationMode from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  simulationMode;
		}
		//	And try to extract SimulationMode value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  simulationMode;

		//	Try to initialize COMPortNb from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  cOMPortNb;
		else {
			//	Try to initialize COMPortNb from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  cOMPortNb;
		}
		//	And try to extract COMPortNb value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cOMPortNb;

	}

	/*----- PROTECTED REGION ID(TPM101::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : TPM101::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void TPM101::always_executed_hook()
{
	DEBUG_STREAM << "TPM101::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(TPM101::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TPM101::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TPM101::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TPM101::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TPM101::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Temperature related method
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPM101::read_Temperature(Tango::Attribute &attr)
{
	DEBUG_STREAM << "01: TPM101::read_Temperature(Tango::Attribute &attr) entering... " << endl;
	Sleep(1);
	/*----- PROTECTED REGION ID(TPM101::read_Temperature) ENABLED START -----*/
	short i;
	uint32_t out_buffer;
	float float_buf;

	string inbuf, outbuf;
	Tango::DevString str_buf;
	if(rS485_addr==8) inbuf = "#GOHGROTVMVJT\r";
	if(rS485_addr==9) inbuf = "#GPHGROTVMVJT\r";
	const char *in_Buf = inbuf.c_str();
	DEBUG_STREAM << "02: TPM101::read_Temperature() - command is: " << in_Buf << endl;
	Sleep(1);

	if (!simulationMode)
	{
		char str_buf[80] = { 0 };
		write_read_com(in_Buf, 20, str_buf);
		DEBUG_STREAM << "03: TPM101::read_Temperature() - response is: " << str_buf << endl;
		Sleep(1);
		string str_buf2{ str_buf };
		string tmr_buf = str_buf2.substr(9,6);
		DEBUG_STREAM << "04: TPM101::read_Temperature()  - temperature code is: " << tmr_buf << endl;
		Sleep(1);
		out_buffer = 0;
		for(i=0;i<6;i++){
			out_buffer+=((tmr_buf[i]-0x47)<<(28-i*4));
		}
		DEBUG_STREAM << "05: TPM101::read_Temperature()  - int float val is: " << out_buffer << endl;
		Sleep(1);
		float_buf = reinterpret_cast<float&>(out_buffer);
		//float_buf = reinterpret_cast<float>(out_buffer);
		DEBUG_STREAM << "06: TPM101::read_Temperature()  - temperature is: " << float_buf << endl;
		*attr_Temperature_read=float_buf;
	}
	//	Set the attribute value
	attr.set_value(attr_Temperature_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::read_Temperature
}
//--------------------------------------------------------
/**
 *	Read attribute PidStatus related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (PidStatusEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPM101::read_PidStatus(Tango::Attribute &attr)
{
	DEBUG_STREAM << "01: TPM101::read_PidStatus(Tango::Attribute &attr) entering... " << endl;
	Sleep(1);
	/*----- PROTECTED REGION ID(TPM101::read_PidStatus) ENABLED START -----*/
	string inbuf, outbuf, str_buf;
	if(rS485_addr==8) inbuf = "#GOHGQVPGTOPQ\r";
	if(rS485_addr==9) inbuf = "#GPHGQVPGTOPQ\r";
	const char *in_Buf = inbuf.c_str();
	DEBUG_STREAM << "02: TPM101::read_PidStatus() - command is: " << in_Buf << endl;
	Sleep(1);

	if (!simulationMode)
	{
		char str_buf[80] = { 0 };
		write_read_com(in_Buf, 16, str_buf);
		Sleep(1);
		DEBUG_STREAM << "03:  TPM101::read_PidStatus() - response is: " << str_buf << endl;
		if(str_buf[10]=='G'){*attr_PidStatus_read = PidStatusEnum::_STOP;}
		if(str_buf[10]=='H'){*attr_PidStatus_read = PidStatusEnum::_RUN;}
	}
	else *attr_PidStatus_read = PidStatusEnum::_STOP;
	//	Set the attribute value
	attr.set_value(attr_PidStatus_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::read_PidStatus
}

//--------------------------------------------------------
/**
 *	Method      : TPM101::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TPM101::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TPM101::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command PidOn related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void TPM101::pid_on()
{
	DEBUG_STREAM << "01: TPM101::PidOn()  - " << device_name << endl;
	Sleep(1);
	/*----- PROTECTED REGION ID(TPM101::pid_on) ENABLED START -----*/
	
	//	Add your own code
	string inbuf;
	if(rS485_addr==8) inbuf = "#GOGHQVPGGHNIHS\r";
	if(rS485_addr==9) inbuf = "#GPGHQVPGGHNIHS\r";
	const char *in_Buf = inbuf.c_str();
	DEBUG_STREAM << "02: TPM101::PidOn() - command is: " << in_Buf << endl;
	Sleep(1);

	if (!simulationMode)
	{
		//write_com(in_Buf);
		char str_buf[80] = { 0 };
		write_read_com(in_Buf, 15, str_buf);
		Sleep(1);
		DEBUG_STREAM << "03:  TPM101::PidOn() - response is: " << str_buf << endl;
	}
	/*----- PROTECTED REGION END -----*/	//	TPM101::pid_on
}
//--------------------------------------------------------
/**
 *	Command PidOff related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void TPM101::pid_off()
{
	DEBUG_STREAM << "01: TPM101::PidOff()  - " << device_name << endl;
	Sleep(1);
	/*----- PROTECTED REGION ID(TPM101::pid_off) ENABLED START -----*/
	
	//	Add your own code
	string inbuf;
	if(rS485_addr==8) inbuf = "#GOGHQVPGGGVTKR\r";
	if(rS485_addr==9) inbuf = "#GPGHQVPGGGVTKR\r";
	const char *in_Buf = inbuf.c_str();
	DEBUG_STREAM << "02: TPM101::PidOff() - command is: " << in_Buf << endl;
	Sleep(1);

	if (!simulationMode)
	{
		//write_com(in_Buf);
		char str_buf[80] = { 0 };
		write_read_com(in_Buf, 15, str_buf);
		Sleep(1);
		DEBUG_STREAM << "03: TPM101::PidOff() - response is: " << str_buf << endl;
	}
	/*----- PROTECTED REGION END -----*/	//	TPM101::pid_off
}
//--------------------------------------------------------
/**
 *	Command InitCOM related method
 *	Description: Initialize COM connection
 *
 */
//--------------------------------------------------------
void TPM101::init_com()
{
	DEBUG_STREAM << "TPM101::InitCOM()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TPM101::init_com) ENABLED START -----*/
	
	//	Add your own code
	DCB dcb1;
	CloseHandle(hCom1);
	COMMTIMEOUTS ctm1;
	wstring ps1;
	ps1 = L"\\\\.\\COM" + to_wstring(cOMPortNb);
	const wchar_t *pcCommPort = ps1.c_str();
	//TCHAR *pcCommPort = TEXT("COM4");
	hCom1 = CreateFile(pcCommPort,GENERIC_READ | GENERIC_WRITE,
		0,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0);
	GetCommState(hCom1, &dcb1);
	dcb1.BaudRate = CBR_19200;
	dcb1.ByteSize = 8;
	dcb1.Parity = NOPARITY;//EVENPARITY;
	dcb1.StopBits = 0;
	SetCommState(hCom1, &dcb1);
	GetCommTimeouts(hCom1, &ctm1);
	ctm1.ReadTotalTimeoutConstant = 1000;
	ctm1.WriteTotalTimeoutConstant = 1000;
	SetCommTimeouts(hCom1, &ctm1);
	PurgeComm(hCom1, PURGE_RXCLEAR);
	PurgeComm(hCom1, PURGE_TXCLEAR);
	/*----- PROTECTED REGION END -----*/	//	TPM101::init_com
}
//--------------------------------------------------------
/**
 *	Method      : TPM101::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TPM101::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TPM101::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	TPM101::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TPM101::namespace_ending) ENABLED START -----*/

//	Additional Methods
//--------------------------------------------------------
/**
 *	Command WriteCOM related method
 *	Description: Sends a commands to COM port
 *
 *	@param argin Command
 */
//--------------------------------------------------------
void TPM101::write_com(const char *argin)
{
	DEBUG_STREAM << "TPM101::WriteCOM()  - " << device_name << endl;
	
	//	Add your own code
	DWORD i;
	WriteFile(hCom1,argin,strlen(argin), &i,NULL);
}

//--------------------------------------------------------
/**
 *	Command WriteReadCOM related method
 *	Description: Send a command to COM port and get the Answer
 *
 *	@param argin Command
 *	@returns Answer
 */
//--------------------------------------------------------
void TPM101::write_read_com(const char *argin, const unsigned long n, char *argout)
{
	DEBUG_STREAM << "n+1: TPM101::WriteReadCOM()  - " << device_name << endl;
	Sleep(1);
	//	Add your own code
	//COMSTAT Stat;
	bool res;
	DWORD err;
	//unsigned long n;
	DWORD i;
	WriteFile(hCom1,argin,strlen(argin), &i,NULL);
	DEBUG_STREAM << "n+2: TPM101::WriteReadCOM() - bytes transmitted: " << i << endl;
	Sleep(1);
	//ClearCommError(hCom1,&err,&Stat);
	//n = Stat.cbInQue;
	//if(n!=0) 
	res	= ReadFile(hCom1, argout, n, &err, NULL);
	char *stmp = argout;
	string stmp2{ *argout };
	DEBUG_STREAM << "n+3: TPM101::WriteReadCOM() - bytes returned: = " << err << " , result: " << boolalpha << res << ", response: " << *stmp << " " << stmp2 << endl;
}


/*----- PROTECTED REGION END -----*/	//	TPM101::namespace_ending
} //	namespace
