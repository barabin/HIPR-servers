/*----- PROTECTED REGION ID(TPM101.h) ENABLED START -----*/
//=============================================================================
//
// file :        TPM101.h
//
// description : Include file for the TPM101 class
//
// project :     TPM101
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef TPM101_H
#define TPM101_H

#include <tango.h>
#include <windows.h>
#include <stdio.h>
#include <string.h>


/*----- PROTECTED REGION END -----*/	//	TPM101.h

/**
 *  TPM101 class description:
 *    PID
 */

namespace TPM101_ns
{
enum class PidStatusEnum : Tango::DevEnum {
	_STOP,
	_RUN,
} ;
//typedef _PidStatusEnum PidStatusEnum;

/*----- PROTECTED REGION ID(TPM101::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	TPM101::Additional Class Declarations

class TPM101 : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(TPM101::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	TPM101::Data Members

//	Device property data members
public:
	//	RS485_addr:	
	Tango::DevUShort	rS485_addr;
	//	SimulationMode:	1 if simulation mode
	Tango::DevLong	simulationMode;
	//	COMPortNb:	
	Tango::DevUShort	cOMPortNb;

//	Attribute data members
public:
	Tango::DevFloat	*attr_Temperature_read;
	PidStatusEnum	*attr_PidStatus_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TPM101(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	TPM101(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	TPM101(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~TPM101() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : TPM101::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute Temperature related methods
 *	Description: 
 *
 *	Data type:	Tango::DevFloat
 *	Attr type:	Scalar
 */
	virtual void read_Temperature(Tango::Attribute &attr);
	virtual bool is_Temperature_allowed(Tango::AttReqType type);
/**
 *	Attribute PidStatus related methods
 *	Description: 
 *
 *	Data type:	Tango::DevEnum
 *	Attr type:	Scalar
 */
	virtual void read_PidStatus(Tango::Attribute &attr);
	virtual bool is_PidStatus_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : TPM101::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command PidOn related method
	 *	Description: 
	 *
	 */
	virtual void pid_on();
	virtual bool is_PidOn_allowed(const CORBA::Any &any);
	/**
	 *	Command PidOff related method
	 *	Description: 
	 *
	 */
	virtual void pid_off();
	virtual bool is_PidOff_allowed(const CORBA::Any &any);
	/**
	 *	Command InitCOM related method
	 *	Description: Initialize COM connection
	 *
	 */
	virtual void init_com();
	virtual bool is_InitCOM_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : TPM101::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(TPM101::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected :	
	void write_com(const char *argin);
	void write_read_com(const char *argin, const unsigned long n, char *argout);
	HANDLE hCom1;
	Tango::DevLong FlagDebugIO;
/*----- PROTECTED REGION END -----*/	//	TPM101::Additional Method prototypes
};

/*----- PROTECTED REGION ID(TPM101::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	TPM101::Additional Classes Definitions

}	//	End of namespace

#endif   //	TPM101_H
