/*----- PROTECTED REGION ID(KykyTCPD_II.h) ENABLED START -----*/
//=============================================================================
//
// file :        KykyTCPD_II.h
//
// description : Include file for the KykyTCPD_II class
//
// project :     KykyTCPD_II
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef KykyTCPD_II_H
#define KykyTCPD_II_H

#include <tango.h>
#include <windows.h>
#include <stdio.h>
#include <string.h>


/*----- PROTECTED REGION END -----*/	//	KykyTCPD_II.h

/**
 *  KykyTCPD_II class description:
 *    Vacuum Pump cntr
 */

namespace KykyTCPD_II_ns
{
/*----- PROTECTED REGION ID(KykyTCPD_II::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	KykyTCPD_II::Additional Class Declarations

class KykyTCPD_II : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(KykyTCPD_II::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	KykyTCPD_II::Data Members

//	Device property data members
public:
	//	RS485_addr:	
	Tango::DevUShort	rS485_addr;
	//	SimulationMode:	1 if simulation mode
	Tango::DevLong	simulationMode;
	//	COMPortNb:	COM Port Number
	Tango::DevUShort	cOMPortNb;

//	Attribute data members
public:
	Tango::DevUShort	*attr_PumpState_read;
	Tango::DevUShort	*attr_Frequency_read;
	Tango::DevUShort	*attr_Current_read;
	Tango::DevUShort	*attr_Voltage_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	KykyTCPD_II(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	KykyTCPD_II(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	KykyTCPD_II(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~KykyTCPD_II() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : KykyTCPD_II::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute PumpState related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_PumpState(Tango::Attribute &attr);
	virtual bool is_PumpState_allowed(Tango::AttReqType type);
/**
 *	Attribute Frequency related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Frequency(Tango::Attribute &attr);
	virtual bool is_Frequency_allowed(Tango::AttReqType type);
/**
 *	Attribute Current related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Current(Tango::Attribute &attr);
	virtual bool is_Current_allowed(Tango::AttReqType type);
/**
 *	Attribute Voltage related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_Voltage(Tango::Attribute &attr);
	virtual bool is_Voltage_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : KykyTCPD_II::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command PumpStart related method
	 *	Description: 
	 *
	 */
	virtual void pump_start();
	virtual bool is_PumpStart_allowed(const CORBA::Any &any);
	/**
	 *	Command PumpStop related method
	 *	Description: 
	 *
	 */
	virtual void pump_stop();
	virtual bool is_PumpStop_allowed(const CORBA::Any &any);
	/**
	 *	Command InitCOM related method
	 *	Description: Initialize COM port connection
	 *
	 */
	virtual void init_com();
	virtual bool is_InitCOM_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : KykyTCPD_II::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(KykyTCPD_II::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected :	
	void write_com(unsigned char* argin, short len);
	void write_read_com(unsigned char* argin, unsigned char *argout);
  	HANDLE hCom1;	
	unsigned short CRC16(unsigned char *argin, short len);
	unsigned short update_crc_16(unsigned short crc, unsigned short mc);
	void init_crc16_tab(void);
	unsigned short crc_tab16[256];
	Tango::DevLong FlagDebugIO;
/*----- PROTECTED REGION END -----*/	//	KykyTCPD_II::Additional Method prototypes
};

/*----- PROTECTED REGION ID(KykyTCPD_II::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	KykyTCPD_II::Additional Classes Definitions

}	//	End of namespace

#endif   //	KykyTCPD_II_H
