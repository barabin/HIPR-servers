/*----- PROTECTED REGION ID(ShimadzuEI_R04M2.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        ShimadzuEI_R04M2.cpp
//
// description : C++ source for the ShimadzuEI_R04M2 class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               ShimadzuEI_R04M2 are implemented in this file.
//
// project :     ShimadzuEI_R04M2
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <ShimadzuEI_R04M2.h>
#include <ShimadzuEI_R04M2Class.h>

/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2.cpp

/**
 *  ShimadzuEI_R04M2 class description:
 *    Vacuum Pump cntr
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  PumpStart     |  pump_start
//  PumpStop      |  pump_stop
//  InitCOM       |  init_com
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  PumpState      |  Tango::DevEnum	Scalar
//  CtrlModeWrite  |  Tango::DevEnum	Scalar
//  CtrlModeRead   |  Tango::DevEnum	Scalar
//================================================================

namespace ShimadzuEI_R04M2_ns
{
/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : ShimadzuEI_R04M2::ShimadzuEI_R04M2()
 *	Description : Constructors for a Tango device
 *                implementing the classShimadzuEI_R04M2
 */
//--------------------------------------------------------
ShimadzuEI_R04M2::ShimadzuEI_R04M2(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::constructor_1
}
//--------------------------------------------------------
ShimadzuEI_R04M2::ShimadzuEI_R04M2(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::constructor_2
}
//--------------------------------------------------------
ShimadzuEI_R04M2::ShimadzuEI_R04M2(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : ShimadzuEI_R04M2::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::delete_device()
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::delete_device
	delete[] attr_PumpState_read;
	delete[] attr_CtrlModeRead_read;
}

//--------------------------------------------------------
/**
 *	Method      : ShimadzuEI_R04M2::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::init_device()
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_PumpState_read = new PumpStateEnum[1];
	attr_CtrlModeRead_read = new CtrlModeReadEnum[1];
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::init_device) ENABLED START -----*/
	
	//	Initialize device
	FlagDebugIO = 0;
  if(!simulationMode)
    {
      init_com(); 
    }
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::init_device
}

//--------------------------------------------------------
/**
 *	Method      : ShimadzuEI_R04M2::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::get_device_property()
{
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("RS485_addr"));
	dev_prop.push_back(Tango::DbDatum("SimulationMode"));
	dev_prop.push_back(Tango::DbDatum("COMPortNb"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on ShimadzuEI_R04M2Class to get class property
		Tango::DbDatum	def_prop, cl_prop;
		ShimadzuEI_R04M2Class	*ds_class =
			(static_cast<ShimadzuEI_R04M2Class *>(get_device_class()));
		int	i = -1;

		//	Try to initialize RS485_addr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  rS485_addr;
		else {
			//	Try to initialize RS485_addr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  rS485_addr;
		}
		//	And try to extract RS485_addr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  rS485_addr;

		//	Try to initialize SimulationMode from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  simulationMode;
		else {
			//	Try to initialize SimulationMode from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  simulationMode;
		}
		//	And try to extract SimulationMode value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  simulationMode;

		//	Try to initialize COMPortNb from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  cOMPortNb;
		else {
			//	Try to initialize COMPortNb from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  cOMPortNb;
		}
		//	And try to extract COMPortNb value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cOMPortNb;

	}

	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : ShimadzuEI_R04M2::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::always_executed_hook()
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : ShimadzuEI_R04M2::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : ShimadzuEI_R04M2::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute PumpState related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (PumpStateEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::read_PumpState(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::read_PumpState(Tango::Attribute &attr) entering... " << endl;
	Sleep(1);
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::read_PumpState) ENABLED START -----*/
	string inbuf, outbuf;
	inbuf = "MJ0" + to_string(rS485_addr) + "CS";
	outbuf = add_crc_str(inbuf,6);
	const char *in_Buf = outbuf.c_str();
	DEBUG_STREAM << "ShimadzuEI_R04M2::read_PumpState() - command is: " << in_Buf << endl;
	string str_buf;
	for (int i = 0; i<8; i++){
		str_buf.append(to_string((unsigned int)in_Buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "ShimadzuEI_R04M2::read_PumpState() - command is: " << str_buf << endl;
	Sleep(1);

	if (!simulationMode)
	{
		char outBuffer[80] = { 0 };
		write_read_com(in_Buf, 11, outBuffer);
		DEBUG_STREAM << "ShimadzuEI_R04M2::read_PumpState() - response is: " << outBuffer << endl;
		if (outBuffer[3] == 'N'){
			if (outBuffer[4] == 'A'){ *attr_PumpState_read = PumpStateEnum::_NA; }
			if (outBuffer[4] == 'N'){ *attr_PumpState_read = PumpStateEnum::_NN; }
			if (outBuffer[4] == 'B'){ *attr_PumpState_read = PumpStateEnum::_NB; }
		}
	}
	else *attr_PumpState_read = PumpStateEnum::_NA;
	//	Set the attribute value
	attr.set_value(attr_PumpState_read);
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::read_PumpState
}
//--------------------------------------------------------
/**
 *	Write attribute CtrlModeWrite related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (CtrlModeWriteEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::write_CtrlModeWrite(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::write_CtrlModeWrite(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	CtrlModeWriteEnum	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::write_CtrlModeWrite) ENABLED START -----*/
//	inBuffer[0] = 0; inBuffer2[0] = 0;
//	//sprintf(inBuffer, "MJ01RT");
	string inbuf, outbuf;
	if (w_val == CtrlModeWriteEnum::_RS485) inbuf = "MJ0" + to_string(rS485_addr) + "LN";
	if (w_val == CtrlModeWriteEnum::_REMOTE) inbuf = "MJ0" + to_string(rS485_addr) + "LF";
	outbuf = add_crc_str(inbuf,6);
	const char *in_Buf = outbuf.c_str();
	DEBUG_STREAM << "ShimadzuEI_R04M2::write_CtrlModeWrite() - command is: " << in_Buf << endl;

	if (!simulationMode)
	{
		char outBuffer[80] = { 0 };
		write_read_com(in_Buf, 9, outBuffer);
	}
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::write_CtrlModeWrite
}
//--------------------------------------------------------
/**
 *	Read attribute CtrlModeRead related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (CtrlModeReadEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::read_CtrlModeRead(Tango::Attribute &attr)
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::read_CtrlModeRead(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::read_CtrlModeRead) ENABLED START -----*/
	string inbuf, outbuf;
	inbuf = "MJ0" + to_string(rS485_addr) + "LS";
	outbuf = add_crc_str(inbuf,6);
	const char *in_Buf = outbuf.c_str();
	DEBUG_STREAM << "ShimadzuEI_R04M2::read_CtrlModeRead() - command is: " << in_Buf << endl;

	if (!simulationMode)
	{
		char outBuffer[80] = { 0 };
		write_read_com(in_Buf, 9, outBuffer);
		DEBUG_STREAM << "ShimadzuEI_R04M2::read_CtrlModeRead() - response is: " << in_Buf << endl;
		if (outBuffer[3] == 'L'){
			if (outBuffer[4] == 'D'){ *attr_CtrlModeRead_read = CtrlModeReadEnum::_LD; }
			if (outBuffer[4] == 'R'){ *attr_CtrlModeRead_read = CtrlModeReadEnum::_LR; }
		}
	}
	else *attr_CtrlModeRead_read = CtrlModeReadEnum::_LD;
	//	Set the attribute value
	attr.set_value(attr_CtrlModeRead_read);
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::read_CtrlModeRead
}

//--------------------------------------------------------
/**
 *	Method      : ShimadzuEI_R04M2::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command PumpStart related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::pump_start()
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::PumpStart()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::pump_start) ENABLED START -----*/
	
	//	Add your own code
	string inbuf, outbuf;
	inbuf = "MJ0" + to_string(rS485_addr) + "RT";
	outbuf = add_crc_str(inbuf,6);
	const char *in_Buf = outbuf.c_str();
	DEBUG_STREAM << "ShimadzuEI_R04M2::PumpStart() - command is: " << in_Buf << endl;

	if (!simulationMode)
	{
		char outBuffer[80] = { 0 };
		write_read_com(in_Buf, 9, outBuffer);
	}
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::pump_start
}
//--------------------------------------------------------
/**
 *	Command PumpStop related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::pump_stop()
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::PumpStop()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::pump_stop) ENABLED START -----*/
	
	//	Add your own code
	string inbuf, outbuf;
	inbuf = "MJ0" + to_string(rS485_addr) + "RP";
	outbuf = add_crc_str(inbuf,6);
	const char *in_Buf = outbuf.c_str();
	DEBUG_STREAM << "ShimadzuEI_R04M2::PumpStop() - command is:" << in_Buf << endl;

	if (!simulationMode)
	{
		char outBuffer[80] = { 0 };
		write_read_com(in_Buf, 9, outBuffer);
	}
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::pump_stop
}
//--------------------------------------------------------
/**
 *	Command InitCOM related method
 *	Description: Initialize COM port connection
 *
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::init_com()
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::InitCOM()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::init_com) ENABLED START -----*/
	
	//	Add your own code
	DCB dcb1;
	COMMTIMEOUTS ctm1;
  CloseHandle(hCom1);
  wstring ps1;
  ps1 = L"\\\\.\\COM" + to_wstring(cOMPortNb);
  const wchar_t *pcCommPort = ps1.c_str();
  //TCHAR *pcCommPort = TEXT("COM8");
  hCom1 = CreateFile(pcCommPort,GENERIC_READ | GENERIC_WRITE,
        0,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0);
  GetCommState(hCom1, &dcb1);
  dcb1.BaudRate = CBR_9600;
  dcb1.ByteSize = 8;
  dcb1.Parity = NOPARITY;//EVENPARITY;
  dcb1.StopBits = 0;
  SetCommState(hCom1, &dcb1);
	GetCommTimeouts(hCom1, &ctm1);
	ctm1.ReadTotalTimeoutConstant = 1000;
	ctm1.WriteTotalTimeoutConstant = 1000;
	SetCommTimeouts(hCom1, &ctm1);
  PurgeComm(hCom1, PURGE_RXCLEAR);
  PurgeComm(hCom1, PURGE_TXCLEAR);
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::init_com
}
//--------------------------------------------------------
/**
 *	Method      : ShimadzuEI_R04M2::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::add_dynamic_commands
}

/*----- PROTECTED REGION ID(ShimadzuEI_R04M2::namespace_ending) ENABLED START -----*/

//	Additional Methods
string ShimadzuEI_R04M2::add_crc_str(string in_buffer, unsigned char len){
	string tstr, tstr2;
	unsigned int i, res = 0;
	for (i = 0; i < len; i++){
		res += in_buffer[i];
	}
	res &= 0xff;
	std::stringstream stream; 
	stream << std::hex << res;
	DEBUG_STREAM << "ShimadzuEI_R04M2::PumpStart::add_crc_str()" << stream.str() << endl;
	if(res<10){
		tstr[0]='0';
		tstr2=stream.str(); tstr[1]=tstr2[0];
		if(tstr[1]>90) tstr[1]-=32;
	}
	else{
		tstr=stream.str();
		if(tstr[0]>90) tstr[0]-=32;
		if(tstr[1]>90) tstr[1]-=32;
	}
	return in_buffer + tstr + "\r";
}
//--------------------------------------------------------
/**
 *	Command WriteCOM related method
 *	Description: Sends a commands to COM port
 *
 *	@param argin Command
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::write_com(const char *argin)
{
	DEBUG_STREAM << "ShimadzuEI_R04M2::WriteCOM()  - " << device_name << endl;

	
	//	Add your own code
	DWORD i;
	WriteFile(hCom1,argin,strlen(argin), &i,NULL);
}

//--------------------------------------------------------
/**
 *	Command WriteReadCOM related method
 *	Description: Send a Command to the COM port and get the Answer
 *
 *	@param argin Command
 *	@returns Answer
 */
//--------------------------------------------------------
void ShimadzuEI_R04M2::write_read_com(const char *argin, const unsigned long n, char *argout)
{
	DEBUG_STREAM << "n+1: ShimadzuEI_R04M2::WriteReadCOM()  - " << device_name << endl;
	Sleep(1);
	//	Add your own code
	//COMSTAT Stat;
	bool res;
	DWORD err;
	//unsigned long n;
	DWORD i;
	WriteFile(hCom1,argin,strlen(argin), &i,NULL);
	DEBUG_STREAM << "n+1: ShimadzuEI_R04M2::WriteReadCOM()  - bytes sended: " << i << endl;
	Sleep(200);
	//ClearCommError(hCom1,&err,&Stat);
	//n = Stat.cbInQue;
	//if(n!=0) 
	res	= ReadFile(hCom1, argout, n, &err, NULL);
	char *stmp = argout;
	string stmp2{ *argout };
	DEBUG_STREAM << "n+2: ShimadzuEI_R04M2::WriteReadCOM() - bytes returned: = " << err << " , result: " << boolalpha << res << ", response: " << *stmp << " " << stmp2 << endl;
}


/*----- PROTECTED REGION END -----*/	//	ShimadzuEI_R04M2::namespace_ending
} //	namespace
