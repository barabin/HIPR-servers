/*----- PROTECTED REGION ID(GornStateMachine.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        GornStateMachine.cpp
//
// description : State machine file for the Gorn class
//
// project :     Gorn
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

#include <Gorn.h>

/*----- PROTECTED REGION END -----*/	//	Gorn::GornStateMachine.cpp

//================================================================
//  States  |  Description
//================================================================
//  ON      |  
//  FAULT   |  


namespace Gorn_ns
{
//=================================================
//		Attributes Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_CurrentWrite_allowed()
 *	Description : Execution allowed for CurrentWrite attribute
 */
//--------------------------------------------------------
bool Gorn::is_CurrentWrite_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for CurrentWrite attribute in Write access.
	/*----- PROTECTED REGION ID(Gorn::CurrentWriteStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::CurrentWriteStateAllowed_WRITE

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_VoltageWrite_allowed()
 *	Description : Execution allowed for VoltageWrite attribute
 */
//--------------------------------------------------------
bool Gorn::is_VoltageWrite_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for VoltageWrite attribute in Write access.
	/*----- PROTECTED REGION ID(Gorn::VoltageWriteStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::VoltageWriteStateAllowed_WRITE

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_CurrentRead_allowed()
 *	Description : Execution allowed for CurrentRead attribute
 */
//--------------------------------------------------------
bool Gorn::is_CurrentRead_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for CurrentRead attribute in read access.
	/*----- PROTECTED REGION ID(Gorn::CurrentReadStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::CurrentReadStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_VoltageRead_allowed()
 *	Description : Execution allowed for VoltageRead attribute
 */
//--------------------------------------------------------
bool Gorn::is_VoltageRead_allowed(TANGO_UNUSED(Tango::AttReqType type))
{

	//	Not any excluded states for VoltageRead attribute in read access.
	/*----- PROTECTED REGION ID(Gorn::VoltageReadStateAllowed_READ) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::VoltageReadStateAllowed_READ
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_ModbusAddr_allowed()
 *	Description : Execution allowed for ModbusAddr attribute
 */
//--------------------------------------------------------
bool Gorn::is_ModbusAddr_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for ModbusAddr attribute in Write access.
	/*----- PROTECTED REGION ID(Gorn::ModbusAddrStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::ModbusAddrStateAllowed_WRITE

	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_RS485Mode_allowed()
 *	Description : Execution allowed for RS485Mode attribute
 */
//--------------------------------------------------------
bool Gorn::is_RS485Mode_allowed(TANGO_UNUSED(Tango::AttReqType type))
{
	//	Not any excluded states for RS485Mode attribute in Write access.
	/*----- PROTECTED REGION ID(Gorn::RS485ModeStateAllowed_WRITE) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::RS485ModeStateAllowed_WRITE

	return true;
}


//=================================================
//		Commands Allowed Methods
//=================================================

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_PowerOn_allowed()
 *	Description : Execution allowed for PowerOn attribute
 */
//--------------------------------------------------------
bool Gorn::is_PowerOn_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOn command.
	/*----- PROTECTED REGION ID(Gorn::PowerOnStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::PowerOnStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_PowerOff_allowed()
 *	Description : Execution allowed for PowerOff attribute
 */
//--------------------------------------------------------
bool Gorn::is_PowerOff_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for PowerOff command.
	/*----- PROTECTED REGION ID(Gorn::PowerOffStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::PowerOffStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_CurrentOn_allowed()
 *	Description : Execution allowed for CurrentOn attribute
 */
//--------------------------------------------------------
bool Gorn::is_CurrentOn_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for CurrentOn command.
	/*----- PROTECTED REGION ID(Gorn::CurrentOnStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::CurrentOnStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_CurrentOff_allowed()
 *	Description : Execution allowed for CurrentOff attribute
 */
//--------------------------------------------------------
bool Gorn::is_CurrentOff_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for CurrentOff command.
	/*----- PROTECTED REGION ID(Gorn::CurrentOffStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::CurrentOffStateAllowed
	return true;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::is_InitCOM_allowed()
 *	Description : Execution allowed for InitCOM attribute
 */
//--------------------------------------------------------
bool Gorn::is_InitCOM_allowed(TANGO_UNUSED(const CORBA::Any &any))
{
	//	Not any excluded states for InitCOM command.
	/*----- PROTECTED REGION ID(Gorn::InitCOMStateAllowed) ENABLED START -----*/
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::InitCOMStateAllowed
	return true;
}


/*----- PROTECTED REGION ID(Gorn::GornStateAllowed.AdditionalMethods) ENABLED START -----*/

//	Additional Methods

/*----- PROTECTED REGION END -----*/	//	Gorn::GornStateAllowed.AdditionalMethods

}	//	End of namespace
