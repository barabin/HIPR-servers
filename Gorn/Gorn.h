/*----- PROTECTED REGION ID(Gorn.h) ENABLED START -----*/
//=============================================================================
//
// file :        Gorn.h
//
// description : Include file for the Gorn class
//
// project :     Gorn
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#ifndef Gorn_H
#define Gorn_H

#include <tango.h>
#include <windows.h>
#include <stdio.h>
#include <string.h>


/*----- PROTECTED REGION END -----*/	//	Gorn.h

/**
 *  Gorn class description:
 *    Gorn Power Supply
 */

namespace Gorn_ns
{
/*----- PROTECTED REGION ID(Gorn::Additional Class Declarations) ENABLED START -----*/

//	Additional Class Declarations

/*----- PROTECTED REGION END -----*/	//	Gorn::Additional Class Declarations

class Gorn : public TANGO_BASE_CLASS
{

/*----- PROTECTED REGION ID(Gorn::Data Members) ENABLED START -----*/

//	Add your own data members

/*----- PROTECTED REGION END -----*/	//	Gorn::Data Members

//	Device property data members
public:
	//	RS485_addr:	
	Tango::DevUShort	rS485_addr;
	//	SimulationMode:	1 if simulation mode
	Tango::DevLong	simulationMode;
	//	COMPortNb:	COM Port Number
	Tango::DevUShort	cOMPortNb;

//	Attribute data members
public:
	Tango::DevUShort	*attr_CurrentRead_read;
	Tango::DevUShort	*attr_VoltageRead_read;

//	Constructors and destructors
public:
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Gorn(Tango::DeviceClass *cl,string &s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device Name
	 */
	Gorn(Tango::DeviceClass *cl,const char *s);
	/**
	 * Constructs a newly device object.
	 *
	 *	@param cl	Class.
	 *	@param s 	Device name
	 *	@param d	Device description.
	 */
	Gorn(Tango::DeviceClass *cl,const char *s,const char *d);
	/**
	 * The device object destructor.
	 */
	~Gorn() {delete_device();};


//	Miscellaneous methods
public:
	/*
	 *	will be called at device destruction or at init command.
	 */
	void delete_device();
	/*
	 *	Initialize the device
	 */
	virtual void init_device();
	/*
	 *	Read the device properties from database
	 */
	void get_device_property();
	/*
	 *	Always executed method before execution command method.
	 */
	virtual void always_executed_hook();


//	Attribute methods
public:
	//--------------------------------------------------------
	/*
	 *	Method      : Gorn::read_attr_hardware()
	 *	Description : Hardware acquisition for attributes.
	 */
	//--------------------------------------------------------
	virtual void read_attr_hardware(vector<long> &attr_list);
	//--------------------------------------------------------
	/*
	 *	Method      : Gorn::write_attr_hardware()
	 *	Description : Hardware writing for attributes.
	 */
	//--------------------------------------------------------
	virtual void write_attr_hardware(vector<long> &attr_list);

/**
 *	Attribute CurrentWrite related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void write_CurrentWrite(Tango::WAttribute &attr);
	virtual bool is_CurrentWrite_allowed(Tango::AttReqType type);
/**
 *	Attribute VoltageWrite related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void write_VoltageWrite(Tango::WAttribute &attr);
	virtual bool is_VoltageWrite_allowed(Tango::AttReqType type);
/**
 *	Attribute CurrentRead related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_CurrentRead(Tango::Attribute &attr);
	virtual bool is_CurrentRead_allowed(Tango::AttReqType type);
/**
 *	Attribute VoltageRead related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void read_VoltageRead(Tango::Attribute &attr);
	virtual bool is_VoltageRead_allowed(Tango::AttReqType type);
/**
 *	Attribute ModbusAddr related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void write_ModbusAddr(Tango::WAttribute &attr);
	virtual bool is_ModbusAddr_allowed(Tango::AttReqType type);
/**
 *	Attribute RS485Mode related methods
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
	virtual void write_RS485Mode(Tango::WAttribute &attr);
	virtual bool is_RS485Mode_allowed(Tango::AttReqType type);


	//--------------------------------------------------------
	/**
	 *	Method      : Gorn::add_dynamic_attributes()
	 *	Description : Add dynamic attributes if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_attributes();




//	Command related methods
public:
	/**
	 *	Command PowerOn related method
	 *	Description: 
	 *
	 */
	virtual void power_on();
	virtual bool is_PowerOn_allowed(const CORBA::Any &any);
	/**
	 *	Command PowerOff related method
	 *	Description: 
	 *
	 */
	virtual void power_off();
	virtual bool is_PowerOff_allowed(const CORBA::Any &any);
	/**
	 *	Command CurrentOn related method
	 *	Description: 
	 *
	 */
	virtual void current_on();
	virtual bool is_CurrentOn_allowed(const CORBA::Any &any);
	/**
	 *	Command CurrentOff related method
	 *	Description: 
	 *
	 */
	virtual void current_off();
	virtual bool is_CurrentOff_allowed(const CORBA::Any &any);
	/**
	 *	Command InitCOM related method
	 *	Description: Initialize COM port connection
	 *
	 */
	virtual void init_com();
	virtual bool is_InitCOM_allowed(const CORBA::Any &any);


	//--------------------------------------------------------
	/**
	 *	Method      : Gorn::add_dynamic_commands()
	 *	Description : Add dynamic commands if any.
	 */
	//--------------------------------------------------------
	void add_dynamic_commands();

/*----- PROTECTED REGION ID(Gorn::Additional Method prototypes) ENABLED START -----*/

//	Additional Method prototypes
protected :	
	void add_crc( Tango::DevString in_buffer);
	void write_com(unsigned char* argin, short len);
	void write_read_com(unsigned char* argin, unsigned char len, unsigned char *argout);
  	HANDLE hCom1;	
	unsigned short CRC16(const unsigned char argin[], short len);
	unsigned short update_crc_16(unsigned short crc, unsigned short mc);
	void init_crc16_tab(void);
	unsigned int crc_tab16[256];
	Tango::DevLong FlagDebugIO;
/*----- PROTECTED REGION END -----*/	//	Gorn::Additional Method prototypes
};

/*----- PROTECTED REGION ID(Gorn::Additional Classes Definitions) ENABLED START -----*/

//	Additional Classes Definitions

/*----- PROTECTED REGION END -----*/	//	Gorn::Additional Classes Definitions

}	//	End of namespace

#endif   //	Gorn_H
