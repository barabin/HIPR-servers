/*----- PROTECTED REGION ID(Gorn.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        Gorn.cpp
//
// description : C++ source for the Gorn class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               Gorn are implemented in this file.
//
// project :     Gorn
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <Gorn.h>
#include <GornClass.h>

/*----- PROTECTED REGION END -----*/	//	Gorn.cpp

/**
 *  Gorn class description:
 *    Gorn Power Supply
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  PowerOn       |  power_on
//  PowerOff      |  power_off
//  CurrentOn     |  current_on
//  CurrentOff    |  current_off
//  InitCOM       |  init_com
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  CurrentWrite  |  Tango::DevUShort	Scalar
//  VoltageWrite  |  Tango::DevUShort	Scalar
//  CurrentRead   |  Tango::DevUShort	Scalar
//  VoltageRead   |  Tango::DevUShort	Scalar
//  ModbusAddr    |  Tango::DevUShort	Scalar
//  RS485Mode     |  Tango::DevUShort	Scalar
//================================================================

namespace Gorn_ns
{
/*----- PROTECTED REGION ID(Gorn::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	Gorn::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : Gorn::Gorn()
 *	Description : Constructors for a Tango device
 *                implementing the classGorn
 */
//--------------------------------------------------------
Gorn::Gorn(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(Gorn::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::constructor_1
}
//--------------------------------------------------------
Gorn::Gorn(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(Gorn::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::constructor_2
}
//--------------------------------------------------------
Gorn::Gorn(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(Gorn::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void Gorn::delete_device()
{
	DEBUG_STREAM << "Gorn::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(Gorn::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::delete_device
	delete[] attr_CurrentRead_read;
	delete[] attr_VoltageRead_read;
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void Gorn::init_device()
{
	DEBUG_STREAM << "Gorn::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(Gorn::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_CurrentRead_read = new Tango::DevUShort[1];
	attr_VoltageRead_read = new Tango::DevUShort[1];
	/*----- PROTECTED REGION ID(Gorn::init_device) ENABLED START -----*/
	
	//	Initialize device
	FlagDebugIO = 0;
	if(!simulationMode)
    {
      init_com(); 
    }
	/*----- PROTECTED REGION END -----*/	//	Gorn::init_device
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void Gorn::get_device_property()
{
	/*----- PROTECTED REGION ID(Gorn::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("RS485_addr"));
	dev_prop.push_back(Tango::DbDatum("SimulationMode"));
	dev_prop.push_back(Tango::DbDatum("COMPortNb"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on GornClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		GornClass	*ds_class =
			(static_cast<GornClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize RS485_addr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  rS485_addr;
		else {
			//	Try to initialize RS485_addr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  rS485_addr;
		}
		//	And try to extract RS485_addr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  rS485_addr;

		//	Try to initialize SimulationMode from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  simulationMode;
		else {
			//	Try to initialize SimulationMode from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  simulationMode;
		}
		//	And try to extract SimulationMode value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  simulationMode;

		//	Try to initialize COMPortNb from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  cOMPortNb;
		else {
			//	Try to initialize COMPortNb from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  cOMPortNb;
		}
		//	And try to extract COMPortNb value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cOMPortNb;

	}

	/*----- PROTECTED REGION ID(Gorn::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void Gorn::always_executed_hook()
{
	DEBUG_STREAM << "Gorn::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(Gorn::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void Gorn::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Gorn::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Gorn::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : Gorn::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void Gorn::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "Gorn::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(Gorn::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Write attribute CurrentWrite related method
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Gorn::write_CurrentWrite(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Gorn::write_CurrentWrite(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevUShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Gorn::write_CurrentWrite) ENABLED START -----*/
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[11] = {(rS485_addr%0x100), 0x10, 0,0x12, 0,2, 2, (w_val/0x100),(w_val%0x100), 0,0};	
	crc=CRC16(adr_buf,9);
	adr_buf[9]=crc%0x100; adr_buf[10]=crc/0x100;
	string str_buf;
	for(i=0; i<11; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::write_CurrentWrite() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 11, recwbuf);
	}
	/*----- PROTECTED REGION END -----*/	//	Gorn::write_CurrentWrite
}
//--------------------------------------------------------
/**
 *	Write attribute VoltageWrite related method
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Gorn::write_VoltageWrite(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Gorn::write_VoltageWrite(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevUShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Gorn::write_VoltageWrite) ENABLED START -----*/
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[11] = {(rS485_addr%0x100), 0x10, 0,0x13, 0,2, 2, (w_val/0x100),(w_val%0x100), 0,0};	
	crc=CRC16(adr_buf,9);
	adr_buf[9]=crc%0x100; adr_buf[10]=crc/0x100;
	string str_buf;
	for(i=0; i<11; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::write_VoltageWrite() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 11, recwbuf);
	}
	/*----- PROTECTED REGION END -----*/	//	Gorn::write_VoltageWrite
}
//--------------------------------------------------------
/**
 *	Read attribute CurrentRead related method
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Gorn::read_CurrentRead(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Gorn::read_CurrentRead(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Gorn::read_CurrentRead) ENABLED START -----*/
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[8] = {(rS485_addr%0x100), 4, 0,0x14, 0,2, 0,0};	
	crc=CRC16(adr_buf,6);
	adr_buf[6]=crc%0x100; adr_buf[7]=crc/0x100;
	string str_buf;
	for(i=0; i<8; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::read_CurrentRead() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 8, recwbuf);
		*attr_CurrentRead_read = recwbuf[4]*0x100 + recwbuf[5];
	}
	//	Set the attribute value
	attr.set_value(attr_CurrentRead_read);
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::read_CurrentRead
}
//--------------------------------------------------------
/**
 *	Read attribute VoltageRead related method
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Gorn::read_VoltageRead(Tango::Attribute &attr)
{
	DEBUG_STREAM << "Gorn::read_VoltageRead(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(Gorn::read_VoltageRead) ENABLED START -----*/
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[8] = {(rS485_addr%0x100), 4, 0,0x14, 0,2, 0,0};	
	crc=CRC16(adr_buf,6);
	adr_buf[6]=crc%0x100; adr_buf[7]=crc/0x100;
	string str_buf;
	for(i=0; i<8; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::read_VoltageRead() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 8, recwbuf);
		*attr_VoltageRead_read = recwbuf[6]*0x100 + recwbuf[7];
	}
	else {
		//Tango::DevUShort Vtest = 100;
		//*attr_VoltageRead_read = Vtest;
	}
	//	Set the attribute value
	attr.set_value(attr_VoltageRead_read);
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::read_VoltageRead
}
//--------------------------------------------------------
/**
 *	Write attribute ModbusAddr related method
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Gorn::write_ModbusAddr(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Gorn::write_ModbusAddr(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevUShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Gorn::write_ModbusAddr) ENABLED START -----*/
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[8] = {(rS485_addr%0x100), 6, 0,0x20, 0,w_val, 0,0};	
	crc=CRC16(adr_buf,6);
	adr_buf[6]=crc%0x100; adr_buf[7]=crc/0x100;
	string str_buf;
	for(i=0; i<8; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::write_ModbusAddr() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 8, recwbuf);
	}
	/*----- PROTECTED REGION END -----*/	//	Gorn::write_ModbusAddr
}
//--------------------------------------------------------
/**
 *	Write attribute RS485Mode related method
 *	Description: 
 *
 *	Data type:	Tango::DevUShort
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void Gorn::write_RS485Mode(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "Gorn::write_RS485Mode(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevUShort	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(Gorn::write_RS485Mode) ENABLED START -----*/
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[8] = {(rS485_addr%0x100), 6, 0,0x22, 0,w_val, 0,0};	
	crc=CRC16(adr_buf,6);
	adr_buf[6]=crc%0x100; adr_buf[7]=crc/0x100;
	string str_buf;
	for(i=0; i<8; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::write_RS485Mode() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 8, recwbuf);
	}
	/*----- PROTECTED REGION END -----*/	//	Gorn::write_RS485Mode
}

//--------------------------------------------------------
/**
 *	Method      : Gorn::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void Gorn::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(Gorn::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command PowerOn related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Gorn::power_on()
{
	DEBUG_STREAM << "Gorn::PowerOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Gorn::power_on) ENABLED START -----*/
	
	//	Add your own code
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[10] = {(rS485_addr%0x100), 0xf, 1,0x10, 0,1, 1, 1, 0,0};	
	crc=CRC16(adr_buf,8);
	adr_buf[8]=crc%0x100; adr_buf[9]=crc/0x100;
	string str_buf;
	for(i=0; i<8; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::PowerOn() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 10, recwbuf);
	}
	/*----- PROTECTED REGION END -----*/	//	Gorn::power_on
}
//--------------------------------------------------------
/**
 *	Command PowerOff related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Gorn::power_off()
{
	DEBUG_STREAM << "Gorn::PowerOff()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Gorn::power_off) ENABLED START -----*/
	
	//	Add your own code
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[10] = {(rS485_addr%0x100), 0xf, 1,0x10, 0,1, 1, 0, 0,0};	
	crc=CRC16(adr_buf,8);
	adr_buf[8]=crc%0x100; adr_buf[9]=crc/0x100;
	string str_buf;
	for(i=0; i<10; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::PowerOff() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 10, recwbuf);
	}
	/*----- PROTECTED REGION END -----*/	//	Gorn::power_off
}
//--------------------------------------------------------
/**
 *	Command CurrentOn related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Gorn::current_on()
{
	DEBUG_STREAM << "Gorn::CurrentOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Gorn::current_on) ENABLED START -----*/
	
	//	Add your own code
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[10] = {(rS485_addr%0x100), 0xf, 1,0x11, 0,1, 1, 1, 0,0};	
	crc=CRC16(adr_buf,8);
	adr_buf[8]=crc%0x100; adr_buf[9]=crc/0x100;
	string str_buf;
	for(i=0; i<10; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::CurrentOn() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 10, recwbuf);
	}
	/*----- PROTECTED REGION END -----*/	//	Gorn::current_on
}
//--------------------------------------------------------
/**
 *	Command CurrentOff related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void Gorn::current_off()
{
	DEBUG_STREAM << "Gorn::CurrentOff()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Gorn::current_off) ENABLED START -----*/
	
	//	Add your own code
	unsigned char recwbuf[40] = { 0 };
	unsigned short crc, i;
	unsigned char adr_buf[10] = {(rS485_addr%0x100), 0xf, 1,0x11, 0,1, 1, 0, 0,0};	
	crc=CRC16(adr_buf,8);
	adr_buf[8]=crc%0x100; adr_buf[9]=crc/0x100;
	string str_buf;
	for(i=0; i<10; i++){
		str_buf.append(to_string((unsigned int)adr_buf[i]));
		str_buf.append(" ");
	}
	DEBUG_STREAM << "Gorn::CurrentOff() - command is: " << str_buf << endl;

	if (!simulationMode)
	{
		write_read_com(adr_buf, 10, recwbuf);
	}
	/*----- PROTECTED REGION END -----*/	//	Gorn::current_off
}
//--------------------------------------------------------
/**
 *	Command InitCOM related method
 *	Description: Initialize COM port connection
 *
 */
//--------------------------------------------------------
void Gorn::init_com()
{
	DEBUG_STREAM << "Gorn::InitCOM()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(Gorn::init_com) ENABLED START -----*/
	
	//	Add your own code
  DCB dcb1;
  COMMTIMEOUTS ctm1;
  CloseHandle(hCom1);
  wstring ps1;
  ps1 = L"\\\\.\\COM" + to_wstring(cOMPortNb);
  const wchar_t *pcCommPort = ps1.c_str();
  //TCHAR *pcCommPort = TEXT("COM6");
  hCom1 = CreateFile(pcCommPort,GENERIC_READ | GENERIC_WRITE,
        0,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0);
  GetCommState(hCom1, &dcb1);
  dcb1.BaudRate = CBR_19200;
  dcb1.ByteSize = 8;
  dcb1.Parity = NOPARITY;//EVENPARITY;
  dcb1.StopBits = 0;
  SetCommState(hCom1, &dcb1);
  GetCommTimeouts(hCom1, &ctm1);
  ctm1.ReadTotalTimeoutConstant = 1000;
  ctm1.WriteTotalTimeoutConstant = 1000;
  SetCommTimeouts(hCom1, &ctm1);
  PurgeComm(hCom1, PURGE_RXCLEAR);
  PurgeComm(hCom1, PURGE_TXCLEAR);
	/*----- PROTECTED REGION END -----*/	//	Gorn::init_com
}
//--------------------------------------------------------
/**
 *	Method      : Gorn::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void Gorn::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(Gorn::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	Gorn::add_dynamic_commands
}

/*----- PROTECTED REGION ID(Gorn::namespace_ending) ENABLED START -----*/

//	Additional Methods
//--------------------------------------------------------
void Gorn::write_com(unsigned char* argin, short len)
{
	DEBUG_STREAM << "Gorn::WriteCOM()  - " << device_name << endl;
	//	Add your own code
	DWORD i, alen;
	alen = sizeof(argin);
	WriteFile(hCom1,argin,alen, &i,NULL);
}

void Gorn::write_read_com(unsigned char* argin, unsigned char len, unsigned char *argout)
{
	DEBUG_STREAM << "n+1: Gorn::WriteReadCOM()  - " << device_name << endl;
	//	Add your own code
	COMSTAT Stat;
	bool res;
	DWORD err;
	unsigned long n;
	DWORD i;//, alen;
	//alen = sizeof(argin);
	WriteFile(hCom1, argin, len, &i, NULL);
	DEBUG_STREAM << "n+2: Gorn::WriteReadCOM() - bytes transmitted: " << i << endl;
	Sleep(200);
	ClearCommError(hCom1, &err, &Stat);
	n = Stat.cbInQue;
	DEBUG_STREAM << "n+3: Gorn::WriteReadCOM() - bytes in receive buffer: " << n << endl;
	Sleep(1);
	if(n!=0){ 
		res	= ReadFile(hCom1, argout, n, &err, NULL);
		string str_buf;
		for (i = 0; i<n; i++){
			str_buf.append(to_string((unsigned int)argout[i]));
			str_buf.append(" ");
		}
		DEBUG_STREAM << "Gorn::WriteReadCOM() - response is: " << str_buf << endl;
		DEBUG_STREAM << "n+4: Gorn::WriteReadCOM() - bytes returned: = " << err << " , result: " << boolalpha << res << endl;
		Sleep(1);
	}
}
unsigned short Gorn::CRC16(const unsigned char argin[], short len){
	unsigned short i, crc_16_modbus;
	crc_16_modbus = 0xffff;
	for(i=0;i<len;i++){
		crc_16_modbus = update_crc_16(crc_16_modbus, argin[i]);
	}
	return crc_16_modbus;
}

unsigned short Gorn::update_crc_16(unsigned short crc, unsigned short mc){
	unsigned short tmp, short_c;
	tmp = crc ^ mc;
	crc = (crc>>8) ^ crc_tab16[tmp%0x100];
	return crc;
}

void Gorn::init_crc16_tab(void){
	unsigned short i,j,crc,c;
	for(i=0;i<256;i++){
		crc=0; c=i;
		for(j=0;j<8;j++){
			if((crc ^ c) & 1) crc=(crc>>1) ^ 0xa001;
			else crc=crc>>1;
			c=c>>1;
		}
		crc_tab16[i]=crc;
	}
}


/*----- PROTECTED REGION END -----*/	//	Gorn::namespace_ending
} //	namespace
