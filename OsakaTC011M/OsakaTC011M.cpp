/*----- PROTECTED REGION ID(OsakaTC011M.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        OsakaTC011M.cpp
//
// description : C++ source for the OsakaTC011M class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               OsakaTC011M are implemented in this file.
//
// project :     OsakaTC011M
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <OsakaTC011M.h>
#include <OsakaTC011MClass.h>

/*----- PROTECTED REGION END -----*/	//	OsakaTC011M.cpp

/**
 *  OsakaTC011M class description:
 *    Vacuum Pump cntr
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name  |  Method name
//================================================================
//  State         |  Inherited (no method)
//  Status        |  Inherited (no method)
//  PumpStart     |  pump_start
//  PumpStop      |  pump_stop
//  InitCOM       |  init_com
//================================================================

//================================================================
//  Attributes managed is:
//================================================================
//  PumpState  |  Tango::DevEnum	Scalar
//================================================================

namespace OsakaTC011M_ns
{
/*----- PROTECTED REGION ID(OsakaTC011M::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : OsakaTC011M::OsakaTC011M()
 *	Description : Constructors for a Tango device
 *                implementing the classOsakaTC011M
 */
//--------------------------------------------------------
OsakaTC011M::OsakaTC011M(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(OsakaTC011M::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::constructor_1
}
//--------------------------------------------------------
OsakaTC011M::OsakaTC011M(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(OsakaTC011M::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::constructor_2
}
//--------------------------------------------------------
OsakaTC011M::OsakaTC011M(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(OsakaTC011M::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : OsakaTC011M::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void OsakaTC011M::delete_device()
{
	DEBUG_STREAM << "OsakaTC011M::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(OsakaTC011M::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::delete_device
	delete[] attr_PumpState_read;
}

//--------------------------------------------------------
/**
 *	Method      : OsakaTC011M::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void OsakaTC011M::init_device()
{
	DEBUG_STREAM << "OsakaTC011M::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(OsakaTC011M::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_PumpState_read = new PumpStateEnum[1];
	/*----- PROTECTED REGION ID(OsakaTC011M::init_device) ENABLED START -----*/
	
	//	Initialize device
	FlagDebugIO = 0;
	if(!simulationMode)
    {
      init_com(); 
    }
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::init_device
}

//--------------------------------------------------------
/**
 *	Method      : OsakaTC011M::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void OsakaTC011M::get_device_property()
{
	/*----- PROTECTED REGION ID(OsakaTC011M::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("RS485_addr"));
	dev_prop.push_back(Tango::DbDatum("SimulationMode"));
	dev_prop.push_back(Tango::DbDatum("COMPortNb"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on OsakaTC011MClass to get class property
		Tango::DbDatum	def_prop, cl_prop;
		OsakaTC011MClass	*ds_class =
			(static_cast<OsakaTC011MClass *>(get_device_class()));
		int	i = -1;

		//	Try to initialize RS485_addr from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  rS485_addr;
		else {
			//	Try to initialize RS485_addr from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  rS485_addr;
		}
		//	And try to extract RS485_addr value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  rS485_addr;

		//	Try to initialize SimulationMode from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  simulationMode;
		else {
			//	Try to initialize SimulationMode from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  simulationMode;
		}
		//	And try to extract SimulationMode value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  simulationMode;

		//	Try to initialize COMPortNb from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  cOMPortNb;
		else {
			//	Try to initialize COMPortNb from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  cOMPortNb;
		}
		//	And try to extract COMPortNb value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cOMPortNb;

	}

	/*----- PROTECTED REGION ID(OsakaTC011M::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : OsakaTC011M::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void OsakaTC011M::always_executed_hook()
{
	DEBUG_STREAM << "OsakaTC011M::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(OsakaTC011M::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : OsakaTC011M::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void OsakaTC011M::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "OsakaTC011M::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(OsakaTC011M::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::read_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute PumpState related method
 *	Description: 
 *
 *	Data type:	Tango::DevEnum (PumpStateEnum)
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void OsakaTC011M::read_PumpState(Tango::Attribute &attr)
{
	DEBUG_STREAM << "01: OsakaTC011M::read_PumpState(Tango::Attribute &attr) entering... " << endl;
	Sleep(1);
	/*----- PROTECTED REGION ID(OsakaTC011M::read_PumpState) ENABLED START -----*/
	int i, i2, j=0;
	unsigned char recwbuf[40] = { 0 };
	//unsigned char adr1_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x80,0x9b,0,2+i2,0xfe-i2,3,3};
	//unsigned char adr3_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x80,0x9b,0,4,0xfc,3,3};
	unsigned char adr_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x80,0x9b,0,2,0xfe,3,3};
	unsigned char wr_cmd_rd_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x81,0x9a,0,0x55,0xab,3,3};
	unsigned char rd_cmd_buf[14] = {2,0,0,9,0x52,0,2,0x80,0x81,0,2,0x9e,3,3};
	unsigned char rd_val_buf[14] = {2,0,0,9,0x52,0,2,0x80,0x82,0,2,0x9d,3,3};
	unsigned char wbuf[8] = {2,0,0,3,0x71,0x8a,3,3};
	unsigned char rduf[10] = {2,0,0,5,0x71,0,0,0x88,3,3};
	//Tango::DevVarCharArray recrbuf = {2,0,0,5,0x71,0,0,0x88,3,3};
	string str_buf_adr = "", str_buf_wrcmd = "", str_buf_rdcmd = "", str_buf_rdval = "", str_buf_rec = "";
	for(i=0; i<15; i++){
		str_buf_adr.append(to_string((unsigned int)adr_buf[i]));
		str_buf_adr.append(" ");
		str_buf_wrcmd.append(to_string((unsigned int)wr_cmd_rd_buf[i]));
		str_buf_wrcmd.append(" ");
	}
	for(i=0; i<14; i++){
		str_buf_rdcmd.append(to_string((unsigned int)rd_cmd_buf[i]));
		str_buf_rdcmd.append(" ");
		str_buf_rdval.append(to_string((unsigned int)rd_val_buf[i]));
		str_buf_rdval.append(" ");
	}

	recwbuf[0] = 0;
	if (!simulationMode)
	{
	for (i2 = 0; i2<6; i2++){
	adr_buf[11]=2+i2; adr_buf[12]=0xfe - i2; 
	str_buf_adr = "";
	for (i = 0; i < 15; i++){
		str_buf_adr.append(to_string((unsigned int)adr_buf[i]));
		str_buf_adr.append(" ");
	}
	DEBUG_STREAM << "02: OsakaTC011M::read_PumpState() - 1-a: LLWQ command is: " << str_buf_adr << endl;
	Sleep(1);
	write_read_com(adr_buf, 15, recwbuf);
	str_buf_rec = "";
	for(i=0;i<sizeof(wbuf);i++){
		if(recwbuf[i]!=wbuf[i]) j=1;
		str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
		str_buf_rec.append(" ");
	}
	DEBUG_STREAM << "03: OsakaTC011M::read_PumpState() - 1-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
	Sleep(1);
	if (j == 0){
	  DEBUG_STREAM << "04: OsakaTC011M::read_PumpState() - 2-a: LLWQ command is: " << str_buf_wrcmd << endl;
	  Sleep(1);
	  write_read_com(wr_cmd_rd_buf, 15, recwbuf);
	  str_buf_rec = "";
	  for(i=0;i<sizeof(wbuf);i++){
		if(recwbuf[i]!=wbuf[i]) j=1;
		str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
		str_buf_rec.append(" ");
	  }
	  DEBUG_STREAM << "05: OsakaTC011M::read_PumpState() - 2-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
	  Sleep(1);
	  if (j == 0){
		DEBUG_STREAM << "06: OsakaTC011M::read_PumpState() - 3-a: LLRQ command is: " << str_buf_rdcmd << endl;
		Sleep(1);
		write_read_com(rd_cmd_buf, 14, recwbuf);
		str_buf_rec = "";
		for (i = 0; i<sizeof(rduf); i++){
			if (recwbuf[i] != rduf[i]) j = 1;
		  str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
		  str_buf_rec.append(" ");
		}
		DEBUG_STREAM << "07: OsakaTC011M::read_PumpState() - 3-b: LLRR response is: " << str_buf_rec << " j=" << j << endl;
		Sleep(1);
		if (j == 0){
		  write_read_com(rd_val_buf, 14, recwbuf);
		  DEBUG_STREAM << "08: OsakaTC011M::read_PumpState() - 4-a: LLRR command is: " << str_buf_rdval << endl;
		  Sleep(1);
		  if (recwbuf[6] == 1)	break;
		}  
	  }
	}
	}
	}
	switch(i2){
		case 0: *attr_PumpState_read=PumpStateEnum::_ACCEL; break;
		case 1: *attr_PumpState_read=PumpStateEnum::_ROTATION; break;
		case 2: *attr_PumpState_read=PumpStateEnum::_NORMAL; break;
		case 3: *attr_PumpState_read=PumpStateEnum::_BRAKE; break;
		case 4: *attr_PumpState_read=PumpStateEnum::_ALARM; break;
		case 5: *attr_PumpState_read=PumpStateEnum::_FAILURE; break;
		default: *attr_PumpState_read=PumpStateEnum::_UNKNOWN;
	}
	//	Set the attribute value
	attr.set_value(attr_PumpState_read);
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::read_PumpState
}

//--------------------------------------------------------
/**
 *	Method      : OsakaTC011M::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void OsakaTC011M::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(OsakaTC011M::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command PumpStart related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void OsakaTC011M::pump_start()
{
	DEBUG_STREAM << "01: OsakaTC011M::PumpStart()  - " << device_name << endl;
	Sleep(1);
	/*----- PROTECTED REGION ID(OsakaTC011M::pump_start) ENABLED START -----*/
	
	//	Add your own code
	int i, j=0;
	unsigned char recwbuf[40] = { 0 };
	unsigned char adr_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x80,0x9b,0,8,0xf8,3,3};
	unsigned char wr_val_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x82,0x99,0,1,0xff,3,3};
	unsigned char wr_cmd_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x81,0x9a,0,0xaa,0x56,3,3};
	unsigned char rd_cmd_buf[14] = {2,0,0,9,0x52,0,2,0x80,0x81,0,2,0x9e,3,3};
	unsigned char wbuf[8] = {2,0,0,3,0x71,0x8a,3,3};
	unsigned char rduf[10] = {2,0,0,5,0x71,0,0,0x88,3,3};
	//Tango::DevVarCharArray recrbuf = {2,0,0,5,0x71,0,0,0x88,3,3};
	string str_buf_adr = "", str_buf_wrcmd = "", str_buf_rdcmd = "", str_buf_rdval = "", str_buf_rec = "";
	for (i = 0; i<15; i++){
		str_buf_adr.append(to_string((unsigned int)adr_buf[i]));
		str_buf_adr.append(" ");
		str_buf_wrcmd.append(to_string((unsigned int)wr_val_buf[i]));
		str_buf_wrcmd.append(" ");
	}
	for(i=0; i<14; i++){
		str_buf_rdcmd.append(to_string((unsigned int)wr_cmd_buf[i]));
		str_buf_rdcmd.append(" ");
		str_buf_rdval.append(to_string((unsigned int)rd_cmd_buf[i]));
		str_buf_rdval.append(" ");
	}

	recwbuf[0] = 0;
	DEBUG_STREAM << "02: OsakaTC011M::PumpStart() - 1-a: LLWQ command is: " << str_buf_adr << endl;
	Sleep(1);
	if (!simulationMode)
	{
	write_read_com(adr_buf, 15, recwbuf);
	str_buf_rec = "";
	for(i=0;i<sizeof(wbuf);i++){
		if(recwbuf[i]!=wbuf[i]) j=1;
		str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
		str_buf_rec.append(" ");
	}
	DEBUG_STREAM << "03: OsakaTC011M::PumpStart() - 1-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
	Sleep(1);
	if (j == 0){
	  DEBUG_STREAM << "04: OsakaTC011M::PumpStart() - 2-a: LLWQ command is: " << str_buf_wrcmd << endl;
	  Sleep(1);
	  write_read_com(wr_val_buf, 15, recwbuf);
	  str_buf_rec = "";
	  for(i=0;i<sizeof(wbuf);i++){
		if(recwbuf[i]!=wbuf[i]) j=1;
			str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
			str_buf_rec.append(" ");
	  }
	  DEBUG_STREAM << "05: OsakaTC011M::PumpStart() - 2-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
	  Sleep(1);
	  if (j == 0){
		DEBUG_STREAM << "06: OsakaTC011M::PumpStart() - 3-a: LLWQ command is: " << str_buf_rdcmd << endl;
		Sleep(1);
		write_read_com(wr_cmd_buf, 15, recwbuf);
		str_buf_rec = "";
		for(i=0;i<sizeof(wbuf);i++){
		  if(recwbuf[i]!=wbuf[i]) j=1;
			str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
			str_buf_rec.append(" ");
		}
		DEBUG_STREAM << "07: OsakaTC011M::PumpStart() - 3-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
		Sleep(1);
		if (j == 0){
		  DEBUG_STREAM << "08: OsakaTC011M::PumpStart() - 4-a: LLWQ command is: " << str_buf_rdval << endl;
		  Sleep(1);
		  write_read_com(rd_cmd_buf, 14, recwbuf);
		  str_buf_rec = "";
		  for(i=0;i<sizeof(rduf);i++){
		    if(recwbuf[i]!=rduf[i]) j=1;
				str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
				str_buf_rec.append(" ");
		  }
		  DEBUG_STREAM << "09: OsakaTC011M::PumpStart() - 4-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
		  Sleep(1);
		}
	  }
	}
	}
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::pump_start
}
//--------------------------------------------------------
/**
 *	Command PumpStop related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void OsakaTC011M::pump_stop()
{
	DEBUG_STREAM << "01: OsakaTC011M::PumpStop()  - " << device_name << endl;
	Sleep(1);
	/*----- PROTECTED REGION ID(OsakaTC011M::pump_stop) ENABLED START -----*/
	
	//	Add your own code
	int i, j=0;
	unsigned char recwbuf[40] = { 0 };
	unsigned char adr_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x80,0x9b,0,9,0xf7,3,3};
	unsigned char wr_val_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x82,0x99,0,1,0xff,3,3};
	unsigned char wr_cmd_buf[15] = {2,0,0,0xa,0x57,0,2,0x80,0x81,0x9a,0,0xaa,0x56,3,3};
	unsigned char rd_cmd_buf[14] = {2,0,0,9,0x52,0,2,0x80,0x81,0,2,0x9e,3,3};
	unsigned char wbuf[8] = {2,0,0,3,0x71,0x8a,3,3};
	unsigned char rduf[10] = {2,0,0,5,0x71,0,0,0x88,3,3};
	//Tango::DevVarCharArray recrbuf = {2,0,0,5,0x71,0,0,0x88,3,3};
	string str_buf_adr = "", str_buf_wrcmd = "", str_buf_rdcmd = "", str_buf_rdval = "", str_buf_rec = "";
	for (i = 0; i<15; i++){
		str_buf_adr.append(to_string((unsigned int)adr_buf[i]));
		str_buf_adr.append(" ");
		str_buf_wrcmd.append(to_string((unsigned int)wr_val_buf[i]));
		str_buf_wrcmd.append(" ");
	}
	for(i=0; i<14; i++){
		str_buf_rdcmd.append(to_string((unsigned int)wr_cmd_buf[i]));
		str_buf_rdcmd.append(" ");
		str_buf_rdval.append(to_string((unsigned int)rd_cmd_buf[i]));
		str_buf_rdval.append(" ");
	}

	recwbuf[0] = 0;
	DEBUG_STREAM << "01: OsakaTC011M::PumpStart() - 1-a: LLWQ command is: " << str_buf_adr << endl;
	Sleep(1);
	if (!simulationMode)
	{
	write_read_com(adr_buf, 15, recwbuf);
	  str_buf_rec = "";
	for(i=0;i<sizeof(wbuf);i++){
		if(recwbuf[i]!=wbuf[i]) j=1;
		str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
		str_buf_rec.append(" ");
	}
	DEBUG_STREAM << "02: OsakaTC011M::PumpStart() - 1-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
	Sleep(1);
	if (j == 0){
	  DEBUG_STREAM << "03: OsakaTC011M::PumpStart() - 2-a: LLWQ command is: " << str_buf_wrcmd << endl;
	  Sleep(1);
	  write_read_com(wr_val_buf, 15, recwbuf);
	  str_buf_rec = "";
	  for(i=0;i<sizeof(wbuf);i++){
		if(recwbuf[i]!=wbuf[i]) j=1;
		str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
		str_buf_rec.append(" ");
	  }
	  DEBUG_STREAM << "04: OsakaTC011M::PumpStart() - 2-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
	  Sleep(1);
	  if (j == 0){
		DEBUG_STREAM << "05: OsakaTC011M::PumpStart() - 3-a: LLWQ command is: " << str_buf_rdcmd << endl;
		Sleep(1);
		write_read_com(wr_cmd_buf, 15, recwbuf);
		str_buf_rec = "";
	  	for(i=0;i<sizeof(wbuf);i++){
		  if(recwbuf[i]!=wbuf[i]) j=1;
			str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
			str_buf_rec.append(" ");
		}
		DEBUG_STREAM << "06: OsakaTC011M::PumpStart() - 3-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
		Sleep(1);
		if (j == 0){
		  DEBUG_STREAM << "07: OsakaTC011M::PumpStart() - 4-a: LLWQ command is: " << str_buf_rdval << endl;
		  Sleep(1);
		  write_read_com(rd_cmd_buf, 14, recwbuf);
		  str_buf_rec = "";
		  for(i=0;i<sizeof(rduf);i++){
			if(recwbuf[i]!=rduf[i]) j=1;
				str_buf_rec.append(to_string((unsigned int)recwbuf[i]));
				str_buf_rec.append(" ");
		  }
		}  
		DEBUG_STREAM << "08: OsakaTC011M::PumpStart() - 4-b: LLWR response is: " << str_buf_rec << " j=" << j << endl;
		Sleep(1);
	  }
	}
	}
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::pump_stop
}
//--------------------------------------------------------
/**
 *	Command InitCOM related method
 *	Description: Initialize COM port connection
 *
 */
//--------------------------------------------------------
void OsakaTC011M::init_com()
{
	DEBUG_STREAM << "OsakaTC011M::InitCOM()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(OsakaTC011M::init_com) ENABLED START -----*/
	
	//	Add your own code
  COMMTIMEOUTS ctm1;
  DCB dcb1;
  CloseHandle(hCom1);
  wstring ps1;
  ps1 = L"\\\\.\\COM" + to_wstring(cOMPortNb);
  const wchar_t *pcCommPort = ps1.c_str();
  //TCHAR *pcCommPort = TEXT("////.//COM12");
  hCom1 = CreateFile(pcCommPort,GENERIC_READ | GENERIC_WRITE,
        0,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,0);
  GetCommState(hCom1, &dcb1);
  dcb1.BaudRate = CBR_38400;
  dcb1.ByteSize = 8;
  dcb1.Parity = NOPARITY;//EVENPARITY;
  dcb1.StopBits = ONESTOPBIT;
  SetCommState(hCom1, &dcb1);
  GetCommTimeouts(hCom1, &ctm1);
  ctm1.ReadTotalTimeoutConstant = 1000;
  ctm1.WriteTotalTimeoutConstant = 1000;
  SetCommTimeouts(hCom1, &ctm1);
  PurgeComm(hCom1, PURGE_RXCLEAR);
  PurgeComm(hCom1, PURGE_TXCLEAR);
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::init_com
}
//--------------------------------------------------------
/**
 *	Method      : OsakaTC011M::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void OsakaTC011M::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(OsakaTC011M::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::add_dynamic_commands
}

/*----- PROTECTED REGION ID(OsakaTC011M::namespace_ending) ENABLED START -----*/

//	Additional Methods
void OsakaTC011M::write_com(unsigned char* argin, short len)
{
	DEBUG_STREAM << "n+1: OsakaTC011M::WriteCOM()  - " << device_name << endl;
	//	Add your own code
	DWORD i, alen;
	alen = sizeof(argin);
	WriteFile(hCom1,argin,alen, &i,NULL);
}

void OsakaTC011M::write_read_com(unsigned char* argin, unsigned char len, unsigned char *argout)
{
	DEBUG_STREAM << "n+1: OsakaTC011M::WriteReadCOM()  - " << device_name << endl;
	Sleep(1);
	//	Add your own code
	COMSTAT Stat;
	bool res;
	DWORD err;
	unsigned long n;
	DWORD i;//, alen;
	//alen = sizeof(argin);
	WriteFile(hCom1, argin, len, &i, NULL);
	DEBUG_STREAM << "n+2: OsakaTC011M::WriteReadCOM() - bytes transmitted: " << i << endl;
	Sleep(80);
	ClearCommError(hCom1, &err, &Stat);
	n = Stat.cbInQue;
	DEBUG_STREAM << "n+3: OsakaTC011M::WriteReadCOM() - bytes in receive buffer: " << n << endl;
	Sleep(1);
	if(n!=0){ 
		res	= ReadFile(hCom1, argout, n, &err, NULL);
		DEBUG_STREAM << "n+4: OsakaTC011M::WriteReadCOM() - bytes returned: = " << err << " , result: " << boolalpha << res << endl;
		Sleep(1);
	}
}

/*----- PROTECTED REGION END -----*/	//	OsakaTC011M::namespace_ending
} //	namespace
