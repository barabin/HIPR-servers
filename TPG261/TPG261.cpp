/*----- PROTECTED REGION ID(TPG261.cpp) ENABLED START -----*/
static const char *RcsId = "$Id:  $";
//=============================================================================
//
// file :        TPG261.cpp
//
// description : C++ source for the TPG261 class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               TPG261 are implemented in this file.
//
// project :     TPG261
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================


#include <TPG261.h>
#include <TPG261Class.h>

/*----- PROTECTED REGION END -----*/	//	TPG261.cpp

/**
 *  TPG261 class description:
 *    Vacuum Measure
 */

//================================================================
//  The following table gives the correspondence
//  between command and method names.
//
//  Command name    |  Method name
//================================================================
//  State           |  Inherited (no method)
//  Status          |  Inherited (no method)
//  PressureReadOn  |  pressure_read_on
//  InitCOM         |  init_com
//================================================================

//================================================================
//  Attributes managed are:
//================================================================
//  Pressure     |  Tango::DevDouble	Scalar
//  PressureCh1  |  Tango::DevDouble	Scalar
//  ScanPeriod   |  Tango::DevUChar	Scalar
//================================================================

namespace TPG261_ns
{
/*----- PROTECTED REGION ID(TPG261::namespace_starting) ENABLED START -----*/

//	static initializations

/*----- PROTECTED REGION END -----*/	//	TPG261::namespace_starting

//--------------------------------------------------------
/**
 *	Method      : TPG261::TPG261()
 *	Description : Constructors for a Tango device
 *                implementing the classTPG261
 */
//--------------------------------------------------------
TPG261::TPG261(Tango::DeviceClass *cl, string &s)
 : TANGO_BASE_CLASS(cl, s.c_str())
{
	/*----- PROTECTED REGION ID(TPG261::constructor_1) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::constructor_1
}
//--------------------------------------------------------
TPG261::TPG261(Tango::DeviceClass *cl, const char *s)
 : TANGO_BASE_CLASS(cl, s)
{
	/*----- PROTECTED REGION ID(TPG261::constructor_2) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::constructor_2
}
//--------------------------------------------------------
TPG261::TPG261(Tango::DeviceClass *cl, const char *s, const char *d)
 : TANGO_BASE_CLASS(cl, s, d)
{
	/*----- PROTECTED REGION ID(TPG261::constructor_3) ENABLED START -----*/
	init_device();
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::constructor_3
}

//--------------------------------------------------------
/**
 *	Method      : TPG261::delete_device()
 *	Description : will be called at device destruction or at init command
 */
//--------------------------------------------------------
void TPG261::delete_device()
{
	DEBUG_STREAM << "TPG261::delete_device() " << device_name << endl;
	/*----- PROTECTED REGION ID(TPG261::delete_device) ENABLED START -----*/
	
	//	Delete device allocated objects
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::delete_device
	delete[] attr_Pressure_read;
	delete[] attr_PressureCh1_read;
	delete[] attr_ScanPeriod_read;
}

//--------------------------------------------------------
/**
 *	Method      : TPG261::init_device()
 *	Description : will be called at device initialization.
 */
//--------------------------------------------------------
void TPG261::init_device()
{
	DEBUG_STREAM << "TPG261::init_device() create device " << device_name << endl;
	/*----- PROTECTED REGION ID(TPG261::init_device_before) ENABLED START -----*/
	
	//	Initialization before get_device_property() call
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::init_device_before
	

	//	Get the device properties from database
	get_device_property();
	
	attr_Pressure_read = new Tango::DevDouble[1];
	attr_PressureCh1_read = new Tango::DevDouble[1];
	attr_ScanPeriod_read = new Tango::DevUChar[1];
	/*----- PROTECTED REGION ID(TPG261::init_device) ENABLED START -----*/
	
	//	Initialize device
	FlagDebugIO = 0;
  if(!simulationMode)
    {
      init_com(); 
    }
	/*----- PROTECTED REGION END -----*/	//	TPG261::init_device
}

//--------------------------------------------------------
/**
 *	Method      : TPG261::get_device_property()
 *	Description : Read database to initialize property data members.
 */
//--------------------------------------------------------
void TPG261::get_device_property()
{
	/*----- PROTECTED REGION ID(TPG261::get_device_property_before) ENABLED START -----*/
	
	//	Initialize property data members
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::get_device_property_before


	//	Read device properties from database.
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("SimulationMode"));
	dev_prop.push_back(Tango::DbDatum("COMPortNb"));

	//	is there at least one property to be read ?
	if (dev_prop.size()>0)
	{
		//	Call database and extract values
		if (Tango::Util::instance()->_UseDb==true)
			get_db_device()->get_property(dev_prop);
	
		//	get instance on TPG261Class to get class property
		Tango::DbDatum	def_prop, cl_prop;
		TPG261Class	*ds_class =
			(static_cast<TPG261Class *>(get_device_class()));
		int	i = -1;

		//	Try to initialize SimulationMode from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  simulationMode;
		else {
			//	Try to initialize SimulationMode from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  simulationMode;
		}
		//	And try to extract SimulationMode value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  simulationMode;

		//	Try to initialize COMPortNb from class property
		cl_prop = ds_class->get_class_property(dev_prop[++i].name);
		if (cl_prop.is_empty()==false)	cl_prop  >>  cOMPortNb;
		else {
			//	Try to initialize COMPortNb from default device value
			def_prop = ds_class->get_default_device_property(dev_prop[i].name);
			if (def_prop.is_empty()==false)	def_prop  >>  cOMPortNb;
		}
		//	And try to extract COMPortNb value from database
		if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  cOMPortNb;

	}

	/*----- PROTECTED REGION ID(TPG261::get_device_property_after) ENABLED START -----*/
	
	//	Check device property data members init
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::get_device_property_after
}

//--------------------------------------------------------
/**
 *	Method      : TPG261::always_executed_hook()
 *	Description : method always executed before any command is executed
 */
//--------------------------------------------------------
void TPG261::always_executed_hook()
{
	DEBUG_STREAM << "TPG261::always_executed_hook()  " << device_name << endl;
	/*----- PROTECTED REGION ID(TPG261::always_executed_hook) ENABLED START -----*/
	
	//	code always executed before all requests
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::always_executed_hook
}

//--------------------------------------------------------
/**
 *	Method      : TPG261::read_attr_hardware()
 *	Description : Hardware acquisition for attributes
 */
//--------------------------------------------------------
void TPG261::read_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TPG261::read_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG261::read_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::read_attr_hardware
}
//--------------------------------------------------------
/**
 *	Method      : TPG261::write_attr_hardware()
 *	Description : Hardware writing for attributes
 */
//--------------------------------------------------------
void TPG261::write_attr_hardware(TANGO_UNUSED(vector<long> &attr_list))
{
	DEBUG_STREAM << "TPG261::write_attr_hardware(vector<long> &attr_list) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG261::write_attr_hardware) ENABLED START -----*/
	
	//	Add your own code
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::write_attr_hardware
}

//--------------------------------------------------------
/**
 *	Read attribute Pressure related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG261::read_Pressure(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG261::read_Pressure(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG261::read_Pressure) ENABLED START -----*/
	if (!simulationMode)
	{
		char out_Buf[4096] = { 0 };
		read_com(true, out_Buf);
		string out_Buf2{ out_Buf };
		DEBUG_STREAM << "02n: TPG261::read_Pressure() - read data string size: " << out_Buf2.size() << " is: " << out_Buf << endl;
		if( (out_Buf[0]=='0') && (out_Buf[out_Buf2.size()-2]==0xd) && (out_Buf[out_Buf2.size()-1]==0xa)){
			string in_Buf = out_Buf2.substr(2,10);
			DEBUG_STREAM << "TPG261::read_Pressure() - pressure is: " << in_Buf << endl;
			*attr_Pressure_read=stod(in_Buf,NULL);
		}
	}
	//	Set the attribute value
	attr.set_value(attr_Pressure_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::read_Pressure
}
//--------------------------------------------------------
/**
 *	Read attribute PressureCh1 related method
 *	Description: 
 *
 *	Data type:	Tango::DevDouble
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG261::read_PressureCh1(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG261::read_PressureCh1(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG261::read_PressureCh1) ENABLED START -----*/
	string inbuf = "PR1\r\n";
	const char *in_Buf = inbuf.c_str();
	DEBUG_STREAM << "02: TPG261::read_PressureCh1() - read pressure command is: " << inbuf << endl;

	if (!simulationMode)
	{
		write_com(in_Buf);
		char out_Buf[80] = { 0 };
		read_com(false, out_Buf, 3);
		string stmp{ out_Buf };
		DEBUG_STREAM << "03n: TPG261::read_PressureCh1() - command response is: " << (int)out_Buf[0] << " " << (int)out_Buf[1] << " " << (int)out_Buf[2] << " " << stmp << endl;
		if (stmp == "\x06\r\n"){
			string inbuf = "\x05";
			const char *in_Buf = inbuf.c_str();
			DEBUG_STREAM << "TPG261::read_PressureCh1() - read data command is: " << (int)inbuf[0] << endl;
			write_com(in_Buf);
			read_com(false, out_Buf, 15);
			string out_Buf2{ out_Buf };
			DEBUG_STREAM << "TPG261::read_PressureCh1() - read data string size: " << out_Buf2.size() << " is: " << out_Buf2 << endl;
			if ((out_Buf[0] == '0') && (out_Buf[out_Buf2.size() - 2] == 0xd) && (out_Buf[out_Buf2.size() - 1] == 0xa)){
				string in_Buf = out_Buf2.substr(2,10);
				DEBUG_STREAM << "TPG261::read_PressureCh1() - pressure is: " << out_Buf << endl;
				*attr_PressureCh1_read=stod(in_Buf);
			}
		}
	}
	//	Set the attribute value
	attr.set_value(attr_PressureCh1_read);
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::read_PressureCh1
}
//--------------------------------------------------------
/**
 *	Read attribute ScanPeriod related method
 *	Description: Pressure Repetition Rate:
 *               0 - 100 ms
 *               1 - 1 sec
 *               2 - 1 min
 *
 *	Data type:	Tango::DevUChar
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG261::read_ScanPeriod(Tango::Attribute &attr)
{
	DEBUG_STREAM << "TPG261::read_ScanPeriod(Tango::Attribute &attr) entering... " << endl;
	/*----- PROTECTED REGION ID(TPG261::read_ScanPeriod) ENABLED START -----*/
	//	Set the attribute value
	attr.set_value(attr_ScanPeriod_read);
	wsp = *attr_ScanPeriod_read;

	/*----- PROTECTED REGION END -----*/	//	TPG261::read_ScanPeriod
}
//--------------------------------------------------------
/**
 *	Write attribute ScanPeriod related method
 *	Description: Pressure Repetition Rate:
 *               0 - 100 ms
 *               1 - 1 sec
 *               2 - 1 min
 *
 *	Data type:	Tango::DevUChar
 *	Attr type:	Scalar
 */
//--------------------------------------------------------
void TPG261::write_ScanPeriod(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "TPG261::write_ScanPeriod(Tango::WAttribute &attr) entering... " << endl;
	//	Retrieve write value
	Tango::DevUChar	w_val;
	attr.get_write_value(w_val);
	/*----- PROTECTED REGION ID(TPG261::write_ScanPeriod) ENABLED START -----*/
	*attr_ScanPeriod_read = w_val;
	wsp = *attr_ScanPeriod_read;
	/*----- PROTECTED REGION END -----*/	//	TPG261::write_ScanPeriod
}

//--------------------------------------------------------
/**
 *	Method      : TPG261::add_dynamic_attributes()
 *	Description : Create the dynamic attributes if any
 *                for specified device.
 */
//--------------------------------------------------------
void TPG261::add_dynamic_attributes()
{
	/*----- PROTECTED REGION ID(TPG261::add_dynamic_attributes) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic attributes if any
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::add_dynamic_attributes
}

//--------------------------------------------------------
/**
 *	Command PressureReadOn related method
 *	Description: 
 *
 */
//--------------------------------------------------------
void TPG261::pressure_read_on()
{
	DEBUG_STREAM << "TPG261::PressureReadOn()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TPG261::pressure_read_on) ENABLED START -----*/
	
	//	Add your own code
	//string inbuf = "COM,1\r\n";
	string inbuf = "COM," + to_string(wsp) + "\r\n";
	const char *in_Buf = inbuf.c_str();
	DEBUG_STREAM << "02: TPG261::PressureReadOn() - command is: " << in_Buf << endl;

	if (!simulationMode)
	{
		write_com(in_Buf);
//		PurgeComm(hCom1, PURGE_RXCLEAR);
		char out_Buf[80] = { 0 };
		read_com(false, out_Buf, 3);
		string stmp{ out_Buf };
		if (stmp == "\x06\r\n"){
			DEBUG_STREAM << "03n: TPG261::PressureReadOn() - response <ACK>" << endl;
			poll_attribute("Pressure",1000);//start pressure polling
		}
	}
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::pressure_read_on
}
//--------------------------------------------------------
/**
 *	Command InitCOM related method
 *	Description: Initialisze COM connection
 *
 */
//--------------------------------------------------------
void TPG261::init_com()
{
	DEBUG_STREAM << "TPG261::InitCOM()  - " << device_name << endl;
	/*----- PROTECTED REGION ID(TPG261::init_com) ENABLED START -----*/
	
	//	Add your own code
  CloseHandle(hCom1);
  COMMTIMEOUTS ctm1;
  DCB dcb1;
  wstring ps1;
  ps1 = L"\\\\.\\COM" + to_wstring(cOMPortNb);
  const wchar_t *pcCommPort = ps1.c_str();
  //TCHAR *pcCommPort = TEXT("\\\\.\\COM11");
  DEBUG_STREAM << "TPG261::InitCOM() - port name is: " << *pcCommPort << endl;
  hCom1 = CreateFile(pcCommPort, GENERIC_READ | GENERIC_WRITE,
        0,NULL,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,NULL);
  GetCommState(hCom1, &dcb1);
  dcb1.BaudRate = CBR_38400;//57600; //9600
  dcb1.ByteSize = 8;
  dcb1.Parity = NOPARITY;//EVENPARITY;
  dcb1.StopBits = 0;
  SetCommState(hCom1, &dcb1);
  GetCommState(hCom1, &dcb1);
  GetCommTimeouts(hCom1, &ctm1);
  ctm1.ReadIntervalTimeout = 0;
  ctm1.ReadTotalTimeoutMultiplier = 0;
  ctm1.ReadTotalTimeoutConstant = 0;
  ctm1.WriteTotalTimeoutMultiplier = 0;
  ctm1.WriteTotalTimeoutConstant = 0;
  SetCommTimeouts(hCom1, &ctm1);
  PurgeComm(hCom1, PURGE_RXCLEAR);
  PurgeComm(hCom1, PURGE_TXCLEAR);
	/*----- PROTECTED REGION END -----*/	//	TPG261::init_com
}
//--------------------------------------------------------
/**
 *	Method      : TPG261::add_dynamic_commands()
 *	Description : Create the dynamic commands if any
 *                for specified device.
 */
//--------------------------------------------------------
void TPG261::add_dynamic_commands()
{
	/*----- PROTECTED REGION ID(TPG261::add_dynamic_commands) ENABLED START -----*/
	
	//	Add your own code to create and add dynamic commands if any
	
	/*----- PROTECTED REGION END -----*/	//	TPG261::add_dynamic_commands
}

/*----- PROTECTED REGION ID(TPG261::namespace_ending) ENABLED START -----*/

//	Additional Methods
//--------------------------------------------------------
/**
 *	Command WriteCOM related method
 *	Description: Sends a commands to the COM port
 *
 *	@param argin Command
 */
//--------------------------------------------------------
void TPG261::write_com(const char *argin)
{
	DEBUG_STREAM << "n+1: TPG261::WriteCOM()  - " << device_name << endl;
	
	//	Add your own code
	DWORD i;
	WriteFile(hCom1,argin,strlen(argin), &i,NULL);
	DEBUG_STREAM << "n+2: TPG261::WriteCOM() - bytes transmitted: " << i << endl;
}

// //--------------------------------------------------------
// /**
//  *	Command ReadCOM related method
//  *	Description: Get Answer
//  *
//  *	@returns Answer
//  */
// //--------------------------------------------------------
void TPG261::read_com(bool wait, char *argout, unsigned long nmb)
{
	DEBUG_STREAM << "TPG261::ReadCOM()  - " << device_name << endl;
	
	//	Add your own code
	COMSTAT Stat;
	bool res;
	DWORD err, err2=2;
	unsigned long n;
	if (wait){
		ClearCommError(hCom1, &err, &Stat);
		n = Stat.cbInQue;
		DEBUG_STREAM << "n+2: TPG261::ReadCOM() - error state is: " << err <<", cbInQue = " << n << endl;
	}
	else n = nmb;
	if (n != 0){
		res = ReadFile(hCom1, argout, n, &err2, NULL);
		char *stmp = argout;
		string stmp2{ *argout };
		DEBUG_STREAM << "n+3: TPG261::ReadCOM() - bytes returned: = " << err2 << " , result: " << boolalpha << res << ", response: " << *stmp << " " << stmp2 << endl;
		if (res == false){
			err2 = GetLastError();
			DEBUG_STREAM << "n+4: TPG261::ReadCOM() - last error is: " << err2 << endl;
		}
	}
}


/*----- PROTECTED REGION END -----*/	//	TPG261::namespace_ending
} //	namespace
